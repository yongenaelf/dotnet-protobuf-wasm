@page "/csharp"
@inject IJSRuntime jsRuntime
@using System.Reflection
@using System.Diagnostics

<PageTitle>Csharp</PageTitle>

<div class="row">
    <div class="col-lg-6">
        <StandaloneCodeEditor @ref="_editor" Id="csharp-editor" ConstructionOptions="EditorConstructionOptions" />
        <button class="btn btn-primary my-2" @onclick="GetValue">Compile</button>
    </div>
    <div class="col-lg-6">
        <StandaloneCodeEditor @ref="_editorCsharp" Id="csharp-dll" ConstructionOptions="CsharpEditorConstructionOptions" />
    </div>
</div>

@if (!string.IsNullOrEmpty(_error))
{
    <h3>Error</h3>
    <p>@_error</p>
}

@if (_stopwatch.IsRunning)
{
    <p>Processing...</p>
}
else if (_stopwatch.ElapsedMilliseconds > 0)
{
    <p>Time taken: @_stopwatch.ElapsedMilliseconds ms</p>
}

@code {
    [Inject]
    ScriptLoaderService _scriptLoaderService { get; set; }

    // https://github.com/serdarciplak/BlazorMonaco/blob/master/SampleApp/Pages/Index.razor
    private StandaloneCodeEditor _editor = null!;
    private StandaloneCodeEditor _editorCsharp = null!;
    private string _error = string.Empty;
    private Stopwatch _stopwatch = new Stopwatch();

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Value = @"
using AElf.Sdk.CSharp.State;

namespace AElf.Contracts.HelloWorld
{
    // The state class is access the blockchain state
    public class HelloWorldState : ContractState
    {
        // A state that holds string value
        public StringState Message { get; set; }
    }
}
"
        };
    }

    private StandaloneEditorConstructionOptions CsharpEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            WordWrap = "on",
        };
    }

    private async Task GetValue()
    {
        _stopwatch.Restart();
        await _editorCsharp.SetValue(string.Empty);
        var val = await _editor.GetValue();
        Console.WriteLine($"value is: {val}");
        _error = string.Empty;

        try
        {
            // compile script to in memory dll string
            var str = await _scriptLoaderService.CompileToDLLString(val, release: true);
            
            _stopwatch.Stop();
            await _editorCsharp.SetValue(str);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }
}